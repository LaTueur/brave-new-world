rnw_destroy_every_higher_tier_title_effect = {
    every_empire = {
		limit = {
			exists = holder
		}
        holder = {
            destroy_title = prev
        }
    }
    every_kingdom = {
		limit = {
			exists = holder
		}
        holder = {
            destroy_title = prev
        }
    }
    every_duchy = {
		limit = {
			exists = holder
			is_mercenary_company = no
		}
        holder = {
            destroy_title = prev
        }
    }
}
rnw_resolve_county_change_effect = {
	create_title_and_vassal_change = {
		type = usurped
		save_scope_as = change
		add_claim_on_loss = no
	}
	change_title_holder_include_vassals = {
		holder = scope:new_count
		change = scope:change
	}
	save_temporary_scope_as = current_county
	if = {
		limit = {
			any_player = {
				capital_province.county = scope:current_county
			}
		}
		every_player = {
			limit = {
				capital_province.county = scope:current_county
			}
			set_player_character = scope:new_count
		}
	}
	resolve_title_and_vassal_change = scope:change
    set_variable = { name = choosen_owner value = yes }
}
rnw_counts_setup_effect = {
    while = {
		limit = {
			any_kingdom = {
				NOT = { exists = var:checked_counties }
			}
		}
		random_kingdom = {
			limit = {
				NOT = { exists = var:checked_counties }
			}
			while = {
				limit = {
					any_county_in_de_jure_hierarchy = {
						NOT = { exists = var:choosen_owner }
					}
				}
				random_county_in_de_jure_hierarchy = {
					limit = {
						NOT = { exists = var:choosen_owner }
					}
					save_temporary_scope_as = core_county
					create_character = {
						age = { $MIN_AGE$ $MAX_AGE$ }
						random_traits = yes
						gender_female_chance = scope:core_county.faith.rnw_female_chance
						culture = scope:core_county.culture
						faith = scope:core_county.faith
						location = scope:core_county.title_province
						save_scope_as = new_count
					}
					rnw_resolve_county_change_effect = yes
				}
				scope:new_count = {
					add_to_list = real_rulers
					set_variable = {
						name = counties_still_wanted
						value = {
							integer_range = {
								min = $MIN_COUNTIES$
								max = $MAX_COUNTIES$
							}
							subtract = 1
						}
					}
					while = {
						limit = {
							var:counties_still_wanted >= 1
							any_sub_realm_county = {
								OR = {
									any_neighboring_county = {
										NOT = { exists = var:choosen_owner }
									}
									any_title_to_title_neighboring_and_across_water_county = {
										NOT = { exists = var:choosen_owner }
									}
								}
							}
						}
						if = {
							limit = {
								any_sub_realm_county = {
									any_neighboring_county = {
										NOT = { exists = var:choosen_owner }
									}
								}
							}
							every_sub_realm_county = {
								every_neighboring_county = {
									limit = {
										NOR = {
											is_in_list = counties_to_select_from
											exists = var:choosen_owner
										}
									}
									add_to_list = counties_to_select_from
								}
							}
						}
						else = {
							every_sub_realm_county = {
								every_title_to_title_neighboring_and_across_water_county = {
									limit = {
										NOR = {
											is_in_list = counties_to_select_from
											exists = var:choosen_owner
										}
									}
									add_to_list = counties_to_select_from
								}
							}
						}
						
						random_in_list = {
							list = counties_to_select_from
							weight = {
								base = 10
								modifier = {
									add = 5
									faith = scope:new_count.faith
								}
								modifier = {
									add = 5
									culture = scope:new_count.culture
								}
								modifier = {
									add = 5
									religion = scope:new_count.religion
								}
								modifier = {
									add = 5
									culture_group = scope:new_count.culture_group
								}
							}
							rnw_resolve_county_change_effect = yes
						}
						every_in_list = {
							list = counties_to_select_from
							remove_from_list = counties_to_select_from
						}
						change_variable = { name = counties_still_wanted subtract = 1 }
					}
				}
			}
			set_variable = { name = checked_counties value = yes }
		}
    }
	every_county = {
		remove_variable = choosen_owner
	}
	every_kingdom = {
		remove_variable = checked_counties
	}
}
rnw_higher_realms_setup_effect = {
	if = {
		limit = {
			$TIER$ = tier_duchy
		}
		every_duchy = {
			limit = {
				is_titular = no
			}
			add_to_list = titles_to_handle
		}
	}
	else_if = {
		limit = {
			$TIER$ = tier_kingdom
		}
		every_kingdom = {
			limit = {
				is_titular = no
			}
			add_to_list = titles_to_handle
		}
	}
	else_if = {
		limit = {
			$TIER$ = tier_empire
		}
		every_empire = {
			limit = {
				is_titular = no
			}
			add_to_list = titles_to_handle
		}
	}
	while = {
		limit = {
			any_in_list = {
				list = titles_to_handle
				NOT = {	exists = var:checked_ownership }
			}
		}
		random_in_list = {
			list = titles_to_handle
			limit = {
				NOT = {	exists = var:checked_ownership }
			}
			random = {
				chance = 0
				modifier = {
					add = {
						value = 100
						subtract = $IGNORE_RATE$
					}
				}
				save_temporary_scope_as = title_searching_owner
				ordered_de_jure_top_liege = {
					order_by = rnw_num_of_held_de_jure_counties
					max = 1
					if = {
						limit = {
							rnw_de_jure_held_percentage >= $THRESHOLD$
						}
						save_temporary_scope_as = new_owner
						create_title_and_vassal_change = {
							type = created
							save_scope_as = change
							add_claim_on_loss = no
						}
						scope:title_searching_owner = {
							change_title_holder = {
								holder = scope:new_owner
								change = scope:change
							}
						}
						resolve_title_and_vassal_change = scope:change
						create_title_and_vassal_change = {
							type = swear_fealty
							save_scope_as = change
							add_claim_on_loss = no
						}
						scope:title_searching_owner = {
							every_de_jure_top_liege = {
								limit = {
									NOT = { this = scope:new_owner }
									highest_held_title_tier < scope:title_searching_owner.tier
									rnw_outside_de_jure_percent <= 0.5
								}
								random = {
									chance = $VASSALIZATION_RATE$
									change_liege = {
										liege = scope:new_owner
										change = scope:change
									}
								}
							}
						}
						resolve_title_and_vassal_change = scope:change
					}
				}
			}
			set_variable = { name = checked_ownership value = yes }
		}
		
	}
	every_in_list = {
		list = titles_to_handle
		remove_variable = checked_ownership
		remove_from_list = titles_to_handle
	}
}
rnw_duchy_setup_based_on_rule_effect = {
	switch = {
		trigger = has_game_rule
		none_rnw_num_of_dukes = {}
		few_rnw_num_of_dukes = {
			rnw_higher_realms_setup_effect = {
				TIER = tier_duchy
				IGNORE_RATE = 50
				THRESHOLD = 0.51
				VASSALIZATION_RATE = 50
			}
		}
		normal_rnw_num_of_dukes = {
			rnw_higher_realms_setup_effect = {
				TIER = tier_duchy
				IGNORE_RATE = 5
				THRESHOLD = 0.30
				VASSALIZATION_RATE = 90
			}
		}
		many_rnw_num_of_dukes = {
			rnw_higher_realms_setup_effect = {
				TIER = tier_duchy
				IGNORE_RATE = 0
				THRESHOLD = 0.20
				VASSALIZATION_RATE = 99
			}
		}
	}
}
rnw_kingdom_setup_based_on_rule_effect = {
	switch = {
		trigger = has_game_rule
		none_rnw_num_of_kings = {}
		few_rnw_num_of_kings = {
			rnw_higher_realms_setup_effect = {
				TIER = tier_kingdom
				IGNORE_RATE = 50
				THRESHOLD = 0.30
				VASSALIZATION_RATE = 50
			}
		}
		normal_rnw_num_of_kings = {
			rnw_higher_realms_setup_effect = {
				TIER = tier_kingdom
				IGNORE_RATE = 14
				THRESHOLD = 0.18
				VASSALIZATION_RATE = 85
			}
		}
		many_rnw_num_of_kings = {
			rnw_higher_realms_setup_effect = {
				TIER = tier_kingdom
				IGNORE_RATE = 0
				THRESHOLD = 0.10
				VASSALIZATION_RATE = 95
			}
		}
	}
}
rnw_empire_setup_based_on_rule_effect = {
	switch = {
		trigger = has_game_rule
		none_rnw_num_of_emperors = {}
		few_rnw_num_of_emperors = {
			rnw_higher_realms_setup_effect = {
				TIER = tier_empire
				IGNORE_RATE = 95
				THRESHOLD = 0.30
				VASSALIZATION_RATE = 95
			}
		}
		normal_rnw_num_of_emperors = {
			rnw_higher_realms_setup_effect = {
				TIER = tier_empire
				IGNORE_RATE = 80
				THRESHOLD = 0.20
				VASSALIZATION_RATE = 95
			}
		}
		many_rnw_num_of_emperors = {
			rnw_higher_realms_setup_effect = {
				TIER = tier_empire
				IGNORE_RATE = 40
				THRESHOLD = 0.15
				VASSALIZATION_RATE = 100
			}
		}
	}
}
rnw_remove_de_jure_effect = {
	every_duchy = {
		limit = {
			any_this_title_or_de_jure_above = {
				tier > tier_duchy
			}
		}
		set_de_jure_liege_title = 0
	}
	every_kingdom = {
		limit = {
			any_this_title_or_de_jure_above = {
				tier > tier_kingdom
			}
		}
		set_de_jure_liege_title = 0
	}
}
rnw_de_jure_setup_effect = {
	save_temporary_scope_value_as = {
		name = tier_long
		value = tier_$TIER$
	}
	save_temporary_scope_value_as = {
		name = bellow_tier
		value = {
			value = tier_$TIER$
			subtract = 1
		}
	}
	save_temporary_scope_value_as = {
		name = max
		value = $MAX$
	}
	save_temporary_scope_value_as = {
		name = min
		value = $MIN$
	}
	if = {
		limit = {
			scope:tier_long = tier_kingdom
		}
		every_duchy = {
			limit = {
				is_titular = no
			}
			add_to_list = titles_to_handle
		}
	}
	else_if = {
		limit = {
			scope:tier_long = tier_empire
		}
		every_kingdom = {
			limit = {
				is_titular = no
			}
			add_to_list = titles_to_handle
		}
	}
	while = {
		limit = {
			any_in_list = {
				list = titles_to_handle
				NOT = {	exists = var:checked_de_jure }
			}
		}
		if = {
			limit = {
				any_in_list = {
					list = titles_to_handle
					rnw_title_can_provide_empty_neighboring_title_trigger = yes
				}
			}
			random_in_list = {
				list = titles_to_handle
				limit = {
					rnw_title_can_provide_empty_neighboring_title_trigger = yes
				}
				random_county_in_de_jure_hierarchy = {
					limit = {
						rnw_county_has_empty_neighboring_title_trigger = yes
					}
					random_neighboring_county = {
						limit = {
							rnw_county_belongs_to_empty_title_trigger = yes
						}
						every_this_title_or_de_jure_above = {
							limit = {
								tier = scope:bellow_tier
							}
							save_scope_as = old_title
						}
					}
				}
			}
		}
		else = {
			random_in_list = {
				list = titles_to_handle
				limit = {
					NOT = {	exists = var:checked_de_jure }
				}
				save_scope_as = old_title
			}
		}

		scope:old_title = {
			create_dynamic_title = {
				tier = $TIER$
				name = NEW_CREATED_TITLE_NAME
			}
			rnw_set_de_jure_liege_title_effect = yes
			title_capital_county = {
				save_temporary_scope_as = core_county
			}
			scope:new_title = {
				set_variable = {
					name = titles_still_wanted
					value = {
						value = $MAX$
						add = $MIN$
						divide = 2
						subtract = 1
					}
				}
				set_coa = scope:old_title
				set_color_from_title = scope:old_title
				set_capital_county = scope:core_county
				while = {
					limit = {
						var:titles_still_wanted >= 1
						rnw_title_has_empty_neighboring_title_trigger = yes
					}
					every_county_in_de_jure_hierarchy = {
						every_neighboring_county = {
							every_this_title_or_de_jure_above = {
								limit = {
									tier = scope:bellow_tier
									NOR = {
										exists = var:checked_de_jure
										is_in_list = titles_to_choose_from
									}
								}
								add_to_list = titles_to_choose_from
							}
						}
					}
					random_in_list = {
						list = titles_to_choose_from
						weight = {
							base = 10
							modifier = {
								factor = rnw_de_jure_choose_multiplier
							}
						}
						rnw_set_de_jure_liege_title_effect = yes
						set_de_jure_liege_title = scope:new_title
						set_variable = { name = checked_de_jure value = yes }
					}
					every_in_list = {
						list = titles_to_choose_from
						remove_from_list = titles_to_choose_from
					}
					change_variable = { name = titles_still_wanted subtract = 1 }
				}
				if = {
					limit = {
						$MIN$ > rnw_num_of_direct_de_jure_titles
					}
					add_to_list = titles_with_few_title
				}
			}
		}
	}
	while = {
		limit = {
			any_in_list = {
				list = titles_with_few_title
				NOT = {	exists = var:checked_merge }
			}
		}
		ordered_in_list = {
			list = titles_with_few_title
			limit = {
				NOT = {	exists = var:checked_merge }
			}
			order_by = rnw_reversed_num_of_direct_de_jure_titles
			save_temporary_scope_as = new_title
			if = {
				limit = {
					any_county_in_de_jure_hierarchy = {
						rnw_can_merge_with_neighboring_title_trigger = yes
					}
				}
				random_county_in_de_jure_hierarchy = {
					limit = {
						rnw_can_merge_with_neighboring_title_trigger = yes
					}
					random_neighboring_county = {
						limit = {
							rnw_can_merge_with_liege_title_trigger = yes
						}
						every_this_title_or_de_jure_above = {
							limit = {
								tier = scope:tier_long
							}
							save_temporary_scope_as = title_to_merge
						}
					}
				}
			}
			else_if = {
				limit = {
					any_in_list = {
						list = handled_coastal_titles
						rnw_has_coastal_county_to_merge_title_trigger = { MAX_DISTANCE = large }
						rnw_can_merge_with_liege_title_trigger = yes
					}
				}
				random_in_list = {
					list = handled_coastal_titles
					limit = {
						rnw_has_coastal_county_to_merge_title_trigger = { MAX_DISTANCE = small }
						rnw_can_merge_with_liege_title_trigger = yes
					}
					alternative_limit = {
						rnw_has_coastal_county_to_merge_title_trigger = { MAX_DISTANCE = medium }
						rnw_can_merge_with_liege_title_trigger = yes
					}
					alternative_limit = {
						rnw_has_coastal_county_to_merge_title_trigger = { MAX_DISTANCE = large }
						rnw_can_merge_with_liege_title_trigger = yes
					}
					every_this_title_or_de_jure_above = {
						limit = {
							tier = scope:tier_long
						}
						save_temporary_scope_as = title_to_merge
					}
				}
			}
			if = {
				limit = {
					exists = scope:title_to_merge
				}
				random_list = {
					10 = {
						modifier = {
							factor = rnw_num_of_direct_de_jure_titles
						}
						rnw_merge_titles_effect = {
							DOMINANT = scope:new_title
							SUBSERVIENT = scope:title_to_merge
						}
					}
					10 = {
						modifier = {
							factor = scope:title_to_merge.rnw_num_of_direct_de_jure_titles
						}
						rnw_merge_titles_effect = {
							DOMINANT = scope:title_to_merge
							SUBSERVIENT = scope:new_title
						}
					}
				}
				clear_saved_scope = title_to_merge
			}
			else = {
				set_variable = { name = checked_merge value = yes }
			}
		}
	}
	every_in_list = {
		list = titles_with_few_title
		remove_variable = checked_merge
		remove_from_list = titles_with_few_title
	}
	every_in_list = {
		list = titles_to_handle
		remove_variable = checked_de_jure
		remove_from_list = titles_to_handle
	}
	every_in_list = {
		list = handled_coastal_titles
		remove_from_list = handled_coastal_titles
	}
	clear_saved_scope = tier_long
	clear_saved_scope = new_title
	clear_saved_scope = old_title
	clear_saved_scope = bellow_tier
	clear_saved_scope = min
	clear_saved_scope = max
}
rnw_set_de_jure_liege_title_effect = {
	set_de_jure_liege_title = scope:new_title
	set_variable = { name = checked_de_jure value = yes }
	if = {
		limit = {
			any_county_in_de_jure_hierarchy = {
				is_coastal_county = yes
			}
		}
		add_to_list = handled_coastal_titles
	}
}
rnw_merge_titles_effect = {
	$SUBSERVIENT$ = {
		every_in_de_jure_hierarchy = {
			continue = {
				tier > scope:bellow_tier
			}
			limit = {
				tier = scope:bellow_tier
			}
			set_de_jure_liege_title = $DOMINANT$
		}
	}
	$SUBSERVIENT$ = {
		if = {
			limit = {
				is_in_list = titles_with_few_title
			}
			set_variable = { name = checked_merge value = yes }
		}
	}
	$DOMINANT$ = {
		if = {
			limit = {
				is_in_list = titles_with_few_title
				scope:min > rnw_num_of_direct_de_jure_titles
			}
			set_variable = { name = checked_merge value = yes }
		}
	}
}
rnw_family_generation_effect = {
	random_list = {
		10 = {
			trigger = {
				age >= 17
			}
			trigger_event = game_rule.1001
		}
		5 = {
			trigger = {
				OR = {
					has_game_rule = extended_rnw_family_generation
					has_game_rule = across_realms_rnw_family_generation
				}
			}
			save_temporary_scope_as = handled_ruler
			rnw_extended_family_generation_effect = { CHARACTER = scope:handled_ruler }
		}
	}
}
rnw_extended_family_generation_effect = {
	$CHARACTER$ = {
		create_character = {
			location = $CHARACTER$.location
			culture = $CHARACTER$.culture
			faith = $CHARACTER$.faith
			gender_female_chance = $CHARACTER$.faith.rnw_female_chance
			age = {
				value = $CHARACTER$.age
				add = {
					integer_range = {
						min = 17
						max = 33
					}
				}
			}
			dynasty_house = $CHARACTER$.house
			save_scope_as = parent
		}
		scope:parent = {
			death = {
				death_reason = death_natural_causes
			}
			if = {
				limit = {
					is_female = yes
				}
				$CHARACTER$ = {
					set_mother = scope:parent
				}
				if = {
					limit = {
						$CHARACTER$.age > 5
					}
					create_character = {
						employer  = $CHARACTER$
						culture = $CHARACTER$.culture
						faith = $CHARACTER$.faith
						gender_female_chance = 50
						age = {
							value = $CHARACTER$.age
							subtract = {
								integer_range = {
									min = 2
									max = 5
								}
							}
						}
						mother = scope:parent
						dynasty_house = $CHARACTER$.house
					}
				}
				if = {
					limit = {
						$CHARACTER$.age > 10
					}
					create_character = {
						employer  = $CHARACTER$
						culture = $CHARACTER$.culture
						faith = $CHARACTER$.faith
						gender_female_chance = 50
						age = {
							value = $CHARACTER$.age
							subtract = {
								integer_range = {
									min = 6
									max = 10
								}
							}
						}
						mother = scope:parent
						dynasty_house = $CHARACTER$.house
					}
				}
				if = {
					limit = {
						$CHARACTER$.age > 16
					}
					create_character = {
						employer  = $CHARACTER$
						culture = $CHARACTER$.culture
						faith = $CHARACTER$.faith
						gender_female_chance = 50
						age = {
							value = $CHARACTER$.age
							subtract = {
								integer_range = {
									min = 11
									max = 16
								}
							}
						}
						mother = scope:parent
						dynasty_house = $CHARACTER$.house
					}
				}
			}
			else = {
				$CHARACTER$ = {
					set_father = scope:parent
				}
				if = {
					limit = {
						$CHARACTER$.age > 5
					}
					create_character = {
						employer  = $CHARACTER$
						culture = $CHARACTER$.culture
						faith = $CHARACTER$.faith
						gender_female_chance = 50
						age = {
							value = $CHARACTER$.age
							subtract = {
								integer_range = {
									min = 2
									max = 5
								}
							}
						}
						father = scope:parent
						dynasty_house = $CHARACTER$.house
					}
				}
				if = {
					limit = {
						$CHARACTER$.age > 10
					}
					create_character = {
						employer  = $CHARACTER$
						culture = $CHARACTER$.culture
						faith = $CHARACTER$.faith
						gender_female_chance = 50
						age = {
							value = $CHARACTER$.age
							subtract = {
								integer_range = {
									min = 6
									max = 10
								}
							}
						}
						father = scope:parent
						dynasty_house = $CHARACTER$.house
					}
				}
				if = {
					limit = {
						$CHARACTER$.age > 16
					}
					create_character = {
						employer  = $CHARACTER$
						culture = $CHARACTER$.culture
						faith = $CHARACTER$.faith
						gender_female_chance = 50
						age = {
							value = $CHARACTER$.age
							subtract = {
								integer_range = {
									min = 11
									max = 16
								}
							}
						}
						father = scope:parent
						dynasty_house = $CHARACTER$.house
					}
				}
			}
		}
	}
}
rnw_connect_families_effect = {
	every_in_list = {
		list = $LIST$
		limit = {
			save_temporary_scope_as = handled_ruler
			any_close_family_member = {
				age >= rnw_rnw_spawn_age_min_value
				age <= rnw_rnw_spawn_age_max_value
			}
			any_in_list = {
				list = $FULL_LIST$
				faith = scope:handled_ruler.faith
				culture = scope:handled_ruler.culture
				is_landed = yes # Might already lost their land by this effect
				NOT = { this = scope:handled_ruler }
			}
			is_landed = yes # Might already lost their land by this effect
		}
		save_temporary_scope_as = handled_ruler
		create_title_and_vassal_change = {
			type = usurped
			save_scope_as = change
			add_claim_on_loss = yes # Even more story
		}
		random_close_family_member = {
			limit = {
				age >= rnw_rnw_spawn_age_min_value
				age <= rnw_rnw_spawn_age_max_value
			}
			weight = {
				base = 10
				modifier = {
					factor = {
						value = faith.rnw_female_chance
						divide = 50
					}
					is_female = yes
				}
			}
			save_temporary_scope_as = placed_relative
			add_to_list = $FULL_LIST$
		}
		random_in_list = {
			list = $FULL_LIST$
			limit = {
				faith = scope:handled_ruler.faith
				culture = scope:handled_ruler.culture
				is_landed = yes # Might already lost their land by this effect
				NOT = { this = scope:handled_ruler }
			}
			every_held_title = {
				limit = {
					tier >= tier_county
				}
				change_title_holder_include_vassals = {
					holder = scope:placed_relative
					change = scope:change
				}
			}
			if = {
				limit = {
					is_ai = no
				}
				set_player_character = scope:placed_relative
			}
		}
		resolve_title_and_vassal_change = scope:change
	}
}
rnw_remove_claims_effect = {
	every_county = {
		rnw_title_remove_claims_effect = yes
	}
	every_duchy = {
		rnw_title_remove_claims_effect = yes
	}
	every_kingdom = {
		rnw_title_remove_claims_effect = yes
	}
	every_empire = {
		rnw_title_remove_claims_effect = yes
	}
}
rnw_title_remove_claims_effect = {
	every_claimant = {
		remove_claim = prev
	}
}
rnw_convert_vassals_effect = {
	ordered_in_list = {
		list = real_rulers
		order_by = highest_held_title_tier
		check_range_bounds = no
		max = 1000000000
		limit = {
			is_independent_ruler = no
		}
		random = {
			chance = 30
			set_culture = liege.culture
		}
		random = {
			chance = 70
			set_character_faith = liege.faith
		}
	}
	every_barony = {
		limit = {
			exists = holder
		}
		holder = {
			if = {
				limit = {
					highest_held_title_tier = tier_barony
				}
				set_culture = liege.culture
				set_character_faith = liege.faith
			}
		}
	}
}
rnw_collect_titles_where_type_dominant_effect = {
	if = {
		limit = {
			$TIER$ = tier_duchy
		}
		every_duchy = {
			limit = {
				is_titular = no
			}
			add_to_list = titles_to_handle
		}
	}
	else_if = {
		limit = {
			$TIER$ = tier_kingdom
		}
		every_kingdom = {
			limit = {
				is_titular = no
			}
			add_to_list = titles_to_handle
		}
	}
	else_if = {
		limit = {
			$TIER$ = tier_empire
		}
		every_empire = {
			limit = {
				is_titular = no
			}
			add_to_list = titles_to_handle
		}
	}
	every_in_list = {
		list = titles_to_handle
		set_variable = {
			name = counties_under_title
			value = 0
		}
		save_temporary_scope_as = handled_title
		every_county_in_de_jure_hierarchy = {
			$TYPE$ = {
				if = {
					limit = {
						has_variable = counties_of_type_under_title
					}
					change_variable = {
						name = counties_of_type_under_title
						add = 1
					}
				}
				else = {
					set_variable = {
						name = counties_of_type_under_title
						value = 1
					}
				}
				add_to_list = types_to_choose_from
			}
			scope:handled_title = {
				change_variable = {
					name = counties_under_title
					add = 1
				}
			}
		}
		ordered_in_list = {
			list = types_to_choose_from
			order_by = var:counties_of_type_under_title
			if = {
				limit = {
					rnw_percent_under_title >= $THRESHOLD$
				}
				add_to_variable_list = {
					name = $LIST$
					target = scope:handled_title
				}
				scope:handled_title = {
					add_to_list = all_titles_added
				}
			}
		}
		every_in_list = {
			list = types_to_choose_from
			remove_variable = counties_of_type_under_title
			remove_from_list = types_to_choose_from
		}
		remove_variable = counties_under_title
	}
	every_in_list = {
		list = titles_to_handle
		remove_from_list = titles_to_handle
	}
}
rnw_give_base_title_names_and_coas_effect = {
	save_temporary_scope_value_as = {
		name = bellow_tier
		value = {
			value = $TIER$
			subtract = 1
		}
	}
	every_in_list = {
		list = all_titles_added
		limit = {
			tier = $TIER$
		}
		add_to_list = titles_to_handle
	}
	every_in_list = {
		list = $TYPE_LIST$
		limit = {
			has_variable_list = $FROM_LIST$
			has_variable_list = $TO_LIST$
		}
		save_temporary_scope_as = handled_type
		every_in_list = {
			list = titles_to_handle
			save_temporary_scope_as = handled_title
			if = {
				limit = {
					scope:handled_type = {
						is_target_in_variable_list = {
							name = $FROM_LIST$
							target = scope:handled_title
						}
					}
				}
				add_to_list = from_title_list
			}
			if = {
				limit = {
					scope:handled_type = {
						is_target_in_variable_list = {
							name = $TO_LIST$
							target = scope:handled_title
						}
					}
				}
				add_to_list = to_title_list
			}
		}
		
		while = {
			limit = {
				list_size = {
					name = from_title_list
					value >= 1
				}
				list_size = {
					name = to_title_list
					value >= 1
				}
			}
			random_in_list = {
				list = from_title_list
				save_scope_as = base_title
				remove_from_list = from_title_list
			}
			random_in_list = {
				list = to_title_list
				save_temporary_scope_as = changed_title
				rnw_merge_titles_effect = {
					DOMINANT = scope:base_title
					SUBSERVIENT = scope:changed_title
				}
				if = {
					limit = {
						exists = holder
					}
					scope:base_title = {
						create_title_and_vassal_change = {
							type = created
							save_scope_as = change
							add_claim_on_loss = no
						}
						change_title_holder_include_vassals = {
							holder = scope:changed_title.holder
							change = scope:change
						}
						resolve_title_and_vassal_change = scope:change
					}
					holder = {
						destroy_title = scope:changed_title
					}
				}
				remove_from_list = to_title_list
			}
		}
		every_in_list = {
			list = from_title_list
			remove_from_list = from_title_list
		}
		every_in_list = {
			list = to_title_list
			remove_from_list = to_title_list
		}
	}
	every_in_list = {
		list = titles_to_handle
		remove_from_list = titles_to_handle
	}
}